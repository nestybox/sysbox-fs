//
// Copyright 2019-2020 Nestybox, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/nestybox/sysbox-fs/domain"
	mock "github.com/stretchr/testify/mock"
)

// NSenterServiceIface is an autogenerated mock type for the NSenterServiceIface type
type NSenterServiceIface struct {
	mock.Mock
}

// NewEvent provides a mock function with given fields: pid, ns, req, res
func (_m *NSenterServiceIface) NewEvent(pid uint32, ns *[]string, req *domain.NSenterMessage, res *domain.NSenterMessage) domain.NSenterEventIface {
	ret := _m.Called(pid, ns, req, res)

	var r0 domain.NSenterEventIface
	if rf, ok := ret.Get(0).(func(uint32, *[]string, *domain.NSenterMessage, *domain.NSenterMessage) domain.NSenterEventIface); ok {
		r0 = rf(pid, ns, req, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.NSenterEventIface)
		}
	}

	return r0
}

// ReceiveResponseEvent provides a mock function with given fields: e
func (_m *NSenterServiceIface) ReceiveResponseEvent(e domain.NSenterEventIface) *domain.NSenterMessage {
	ret := _m.Called(e)

	var r0 *domain.NSenterMessage
	if rf, ok := ret.Get(0).(func(domain.NSenterEventIface) *domain.NSenterMessage); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NSenterMessage)
		}
	}

	return r0
}

// SendRequestEvent provides a mock function with given fields: e
func (_m *NSenterServiceIface) SendRequestEvent(e domain.NSenterEventIface) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.NSenterEventIface) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
