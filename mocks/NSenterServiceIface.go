// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/nestybox/sysbox-fs/domain"
	mock "github.com/stretchr/testify/mock"
)

// NSenterServiceIface is an autogenerated mock type for the NSenterServiceIface type
type NSenterServiceIface struct {
	mock.Mock
}

// GetEventProcessID provides a mock function with given fields: e
func (_m *NSenterServiceIface) GetEventProcessID(e domain.NSenterEventIface) uint32 {
	ret := _m.Called(e)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(domain.NSenterEventIface) uint32); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// NewEvent provides a mock function with given fields: pid, ns, cloneFlags, req, res, async
func (_m *NSenterServiceIface) NewEvent(pid uint32, ns *[]string, cloneFlags uint32, req *domain.NSenterMessage, res *domain.NSenterMessage, async bool) domain.NSenterEventIface {
	ret := _m.Called(pid, ns, cloneFlags, req, res, async)

	var r0 domain.NSenterEventIface
	if rf, ok := ret.Get(0).(func(uint32, *[]string, uint32, *domain.NSenterMessage, *domain.NSenterMessage, bool) domain.NSenterEventIface); ok {
		r0 = rf(pid, ns, cloneFlags, req, res, async)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.NSenterEventIface)
		}
	}

	return r0
}

// ReceiveResponseEvent provides a mock function with given fields: e
func (_m *NSenterServiceIface) ReceiveResponseEvent(e domain.NSenterEventIface) *domain.NSenterMessage {
	ret := _m.Called(e)

	var r0 *domain.NSenterMessage
	if rf, ok := ret.Get(0).(func(domain.NSenterEventIface) *domain.NSenterMessage); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NSenterMessage)
		}
	}

	return r0
}

// SendRequestEvent provides a mock function with given fields: e
func (_m *NSenterServiceIface) SendRequestEvent(e domain.NSenterEventIface) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.NSenterEventIface) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setup provides a mock function with given fields: prs, mts
func (_m *NSenterServiceIface) Setup(prs domain.ProcessServiceIface, mts domain.MountServiceIface) {
	_m.Called(prs, mts)
}

// TerminateRequestEvent provides a mock function with given fields: e
func (_m *NSenterServiceIface) TerminateRequestEvent(e domain.NSenterEventIface) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.NSenterEventIface) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNSenterServiceIface creates a new instance of NSenterServiceIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNSenterServiceIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *NSenterServiceIface {
	mock := &NSenterServiceIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
