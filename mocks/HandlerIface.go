// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/nestybox/sysbox-fs/domain"
	mock "github.com/stretchr/testify/mock"

	os "os"

	syscall "syscall"
)

// HandlerIface is an autogenerated mock type for the HandlerIface type
type HandlerIface struct {
	mock.Mock
}

// Close provides a mock function with given fields: node
func (_m *HandlerIface) Close(node domain.IOnodeIface) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEnabled provides a mock function with given fields:
func (_m *HandlerIface) GetEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *HandlerIface) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPath provides a mock function with given fields:
func (_m *HandlerIface) GetPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetService provides a mock function with given fields:
func (_m *HandlerIface) GetService() domain.HandlerServiceIface {
	ret := _m.Called()

	var r0 domain.HandlerServiceIface
	if rf, ok := ret.Get(0).(func() domain.HandlerServiceIface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.HandlerServiceIface)
		}
	}

	return r0
}

// GetType provides a mock function with given fields:
func (_m *HandlerIface) GetType() domain.HandlerType {
	ret := _m.Called()

	var r0 domain.HandlerType
	if rf, ok := ret.Get(0).(func() domain.HandlerType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.HandlerType)
	}

	return r0
}

// Getattr provides a mock function with given fields: n, req
func (_m *HandlerIface) Getattr(n domain.IOnodeIface, req *domain.HandlerRequest) (*syscall.Stat_t, error) {
	ret := _m.Called(n, req)

	var r0 *syscall.Stat_t
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, *domain.HandlerRequest) *syscall.Stat_t); ok {
		r0 = rf(n, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*syscall.Stat_t)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface, *domain.HandlerRequest) error); ok {
		r1 = rf(n, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lookup provides a mock function with given fields: n, req
func (_m *HandlerIface) Lookup(n domain.IOnodeIface, req *domain.HandlerRequest) (os.FileInfo, error) {
	ret := _m.Called(n, req)

	var r0 os.FileInfo
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, *domain.HandlerRequest) os.FileInfo); ok {
		r0 = rf(n, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface, *domain.HandlerRequest) error); ok {
		r1 = rf(n, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: node, req
func (_m *HandlerIface) Open(node domain.IOnodeIface, req *domain.HandlerRequest) error {
	ret := _m.Called(node, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, *domain.HandlerRequest) error); ok {
		r0 = rf(node, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: node, req
func (_m *HandlerIface) Read(node domain.IOnodeIface, req *domain.HandlerRequest) (int, error) {
	ret := _m.Called(node, req)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, *domain.HandlerRequest) int); ok {
		r0 = rf(node, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface, *domain.HandlerRequest) error); ok {
		r1 = rf(node, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDirAll provides a mock function with given fields: node, req
func (_m *HandlerIface) ReadDirAll(node domain.IOnodeIface, req *domain.HandlerRequest) ([]os.FileInfo, error) {
	ret := _m.Called(node, req)

	var r0 []os.FileInfo
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, *domain.HandlerRequest) []os.FileInfo); ok {
		r0 = rf(node, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface, *domain.HandlerRequest) error); ok {
		r1 = rf(node, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetEnabled provides a mock function with given fields: val
func (_m *HandlerIface) SetEnabled(val bool) {
	_m.Called(val)
}

// SetService provides a mock function with given fields: hs
func (_m *HandlerIface) SetService(hs domain.HandlerServiceIface) {
	_m.Called(hs)
}

// Write provides a mock function with given fields: node, req
func (_m *HandlerIface) Write(node domain.IOnodeIface, req *domain.HandlerRequest) (int, error) {
	ret := _m.Called(node, req)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, *domain.HandlerRequest) int); ok {
		r0 = rf(node, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface, *domain.HandlerRequest) error); ok {
		r1 = rf(node, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
