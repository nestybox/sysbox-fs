// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MountHelperIface is an autogenerated mock type for the MountHelperIface type
type MountHelperIface struct {
	mock.Mock
}

// FilterFsFlags provides a mock function with given fields: fsOpts
func (_m *MountHelperIface) FilterFsFlags(fsOpts map[string]string) string {
	ret := _m.Called(fsOpts)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]string) string); ok {
		r0 = rf(fsOpts)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasPropagationFlag provides a mock function with given fields: flags
func (_m *MountHelperIface) HasPropagationFlag(flags uint64) bool {
	ret := _m.Called(flags)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsBind provides a mock function with given fields: flags
func (_m *MountHelperIface) IsBind(flags uint64) bool {
	ret := _m.Called(flags)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsMove provides a mock function with given fields: flags
func (_m *MountHelperIface) IsMove(flags uint64) bool {
	ret := _m.Called(flags)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsNewMount provides a mock function with given fields: flags
func (_m *MountHelperIface) IsNewMount(flags uint64) bool {
	ret := _m.Called(flags)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsReadOnlyMount provides a mock function with given fields: flags
func (_m *MountHelperIface) IsReadOnlyMount(flags uint64) bool {
	ret := _m.Called(flags)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsRemount provides a mock function with given fields: flags
func (_m *MountHelperIface) IsRemount(flags uint64) bool {
	ret := _m.Called(flags)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ProcMounts provides a mock function with given fields:
func (_m *MountHelperIface) ProcMounts() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// StringToFlags provides a mock function with given fields: s
func (_m *MountHelperIface) StringToFlags(s map[string]string) uint64 {
	ret := _m.Called(s)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(map[string]string) uint64); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// SysMounts provides a mock function with given fields:
func (_m *MountHelperIface) SysMounts() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}
