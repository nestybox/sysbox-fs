// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/nestybox/sysbox-fs/domain"
	mock "github.com/stretchr/testify/mock"
)

// MountServiceIface is an autogenerated mock type for the MountServiceIface type
type MountServiceIface struct {
	mock.Mock
}

// MountHelper provides a mock function with given fields:
func (_m *MountServiceIface) MountHelper() domain.MountHelperIface {
	ret := _m.Called()

	var r0 domain.MountHelperIface
	if rf, ok := ret.Get(0).(func() domain.MountHelperIface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MountHelperIface)
		}
	}

	return r0
}

// NewMountHelper provides a mock function with given fields:
func (_m *MountServiceIface) NewMountHelper() domain.MountHelperIface {
	ret := _m.Called()

	var r0 domain.MountHelperIface
	if rf, ok := ret.Get(0).(func() domain.MountHelperIface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MountHelperIface)
		}
	}

	return r0
}

// NewMountInfoParser provides a mock function with given fields: c, pid, deep
func (_m *MountServiceIface) NewMountInfoParser(c domain.ContainerIface, pid uint32, deep bool) (domain.MountInfoParserIface, error) {
	ret := _m.Called(c, pid, deep)

	var r0 domain.MountInfoParserIface
	if rf, ok := ret.Get(0).(func(domain.ContainerIface, uint32, bool) domain.MountInfoParserIface); ok {
		r0 = rf(c, pid, deep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MountInfoParserIface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ContainerIface, uint32, bool) error); ok {
		r1 = rf(c, pid, deep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Setup provides a mock function with given fields: css, hds
func (_m *MountServiceIface) Setup(css domain.ContainerStateServiceIface, hds domain.HandlerServiceIface) {
	_m.Called(css, hds)
}
