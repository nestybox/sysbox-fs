//
// Copyright 2019-2020 Nestybox, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/nestybox/sysbox-fs/domain"
	mock "github.com/stretchr/testify/mock"

	os "os"
)

// IOServiceIface is an autogenerated mock type for the IOServiceIface type
type IOServiceIface struct {
	mock.Mock
}

// CloseNode provides a mock function with given fields: i
func (_m *IOServiceIface) CloseNode(i domain.IOnodeIface) error {
	ret := _m.Called(i)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetServiceType provides a mock function with given fields:
func (_m *IOServiceIface) GetServiceType() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewIOnode provides a mock function with given fields: n, p, attr
func (_m *IOServiceIface) NewIOnode(n string, p string, attr os.FileMode) domain.IOnodeIface {
	ret := _m.Called(n, p, attr)

	var r0 domain.IOnodeIface
	if rf, ok := ret.Get(0).(func(string, string, os.FileMode) domain.IOnodeIface); ok {
		r0 = rf(n, p, attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.IOnodeIface)
		}
	}

	return r0
}

// OpenNode provides a mock function with given fields: i
func (_m *IOServiceIface) OpenNode(i domain.IOnodeIface) error {
	ret := _m.Called(i)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PathNode provides a mock function with given fields: i
func (_m *IOServiceIface) PathNode(i domain.IOnodeIface) string {
	ret := _m.Called(i)

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) string); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadAtNode provides a mock function with given fields: i, p, off
func (_m *IOServiceIface) ReadAtNode(i domain.IOnodeIface, p []byte, off int64) (int, error) {
	ret := _m.Called(i, p, off)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, []byte, int64) int); ok {
		r0 = rf(i, p, off)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface, []byte, int64) error); ok {
		r1 = rf(i, p, off)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDirAllNode provides a mock function with given fields: i
func (_m *IOServiceIface) ReadDirAllNode(i domain.IOnodeIface) ([]os.FileInfo, error) {
	ret := _m.Called(i)

	var r0 []os.FileInfo
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) []os.FileInfo); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFileNode provides a mock function with given fields: i
func (_m *IOServiceIface) ReadFileNode(i domain.IOnodeIface) ([]byte, error) {
	ret := _m.Called(i)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) []byte); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadLineNode provides a mock function with given fields: i
func (_m *IOServiceIface) ReadLineNode(i domain.IOnodeIface) (string, error) {
	ret := _m.Called(i)

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) string); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadNode provides a mock function with given fields: i, p
func (_m *IOServiceIface) ReadNode(i domain.IOnodeIface, p []byte) (int, error) {
	ret := _m.Called(i, p)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, []byte) int); ok {
		r0 = rf(i, p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface, []byte) error); ok {
		r1 = rf(i, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAllIOnodes provides a mock function with given fields:
func (_m *IOServiceIface) RemoveAllIOnodes() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SeekResetNode provides a mock function with given fields: i
func (_m *IOServiceIface) SeekResetNode(i domain.IOnodeIface) (int64, error) {
	ret := _m.Called(i)

	var r0 int64
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) int64); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatNode provides a mock function with given fields: i
func (_m *IOServiceIface) StatNode(i domain.IOnodeIface) (os.FileInfo, error) {
	ret := _m.Called(i)

	var r0 os.FileInfo
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface) os.FileInfo); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(os.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteNode provides a mock function with given fields: i, p
func (_m *IOServiceIface) WriteNode(i domain.IOnodeIface, p []byte) (int, error) {
	ret := _m.Called(i, p)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.IOnodeIface, []byte) int); ok {
		r0 = rf(i, p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IOnodeIface, []byte) error); ok {
		r1 = rf(i, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
