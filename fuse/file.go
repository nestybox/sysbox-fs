//
// Copyright 2019-2020 Nestybox, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package fuse

import (
	"context"
	"fmt"
	"io"
	"os"
	"syscall"
	"time"

	"bazil.org/fuse"
	"bazil.org/fuse/fs"
	"github.com/sirupsen/logrus"

	"github.com/nestybox/sysbox-fs/domain"
)

type File struct {
	// File name.
	name string

	// File absolute-path + name.
	path string

	// File attributes.
	attr *fuse.Attr

	// Pointer to parent fuseService hosting this file/dir.
	server *fuseServer
}

//
// NewFile method serves as File constructor.
//
func NewFile(name string, path string, attr *fuse.Attr, srv *fuseServer) *File {

	newFile := &File{
		name:   name,
		path:   path,
		attr:   attr,
		server: srv,
	}

	return newFile
}

//
// Attr FS operation.
//
func (f *File) Attr(ctx context.Context, a *fuse.Attr) error {

	logrus.Debugf("Requested Attr() operation for entry %v", f.path)

	// Simply return the attributes that were previously collected during the
	// lookup() execution.
	*a = *f.attr

	return nil
}

//
// Getattr FS operation.
//
func (f *File) Getattr(
	ctx context.Context,
	req *fuse.GetattrRequest,
	resp *fuse.GetattrResponse) error {

	logrus.Debugf("Requested GetAttr() operation for entry %v (Req ID=%#v)",
		f.path, uint64(req.ID))

	// Use the attributes obtained during Lookup()
	resp.Attr = *f.attr

	// Override the uid & gid attributes with the user-ns' root uid & gid of the
	// sys container under which the request is received. In the future we should
	// return the requester's user-ns root uid & gid instead, which could differ
	// from the sys container's one if request is originated from an L2 container.
	// Also, this will help us to support "unshare -U -m --mount-proc" inside a
	// sys container.
	resp.Attr.Uid = f.server.container.UID()
	resp.Attr.Gid = f.server.container.GID()

	return nil
}

//
// Open FS operation.
//
func (f *File) Open(
	ctx context.Context,
	req *fuse.OpenRequest,
	resp *fuse.OpenResponse) (fs.Handle, error) {

	logrus.Debugf("Requested Open() operation for entry %v (Req ID=%#v)",
		f.path, uint64(req.ID))

	ionode := f.server.service.ios.NewIOnode(f.name, f.path, f.attr.Mode)
	ionode.SetOpenFlags(int(req.Flags))

	// Lookup the associated handler within handler-DB.
	handler, ok := f.server.service.hds.LookupHandler(ionode)
	if !ok {
		logrus.Errorf("No supported handler for %v resource", f.path)
		return nil, fmt.Errorf("No supported handler for %v resource", f.path)
	}

	request := &domain.HandlerRequest{
		ID:        uint64(req.ID),
		Pid:       req.Pid,
		Uid:       req.Uid,
		Gid:       req.Gid,
		Container: f.server.container,
	}

	// Handler execution.
	err := handler.Open(ionode, request)
	if err != nil && err != io.EOF {
		logrus.Debugf("Open() error: %v", err)
		return nil, err
	}

	//
	// Due to the nature of procfs and sysfs, files lack explicit sizes (other
	// than zero) as regular files have. In consequence, read operations (also
	// writes) may not be properly handled by kernel, as these ones extend
	// beyond the file sizes reported by Attr() / GetAttr().
	//
	// A solution to this problem is to rely on O_DIRECT flag for all the
	// interactions with procfs/sysfs files. By making use of this flag,
	// sysbox-fs will ensure that it receives all read/write requests
	// generated by fuse-clients, regardless of the file-size issue mentioned
	// above. For regular files, this approach usually comes with a cost, as
	// page-cache is being bypassed for all files I/O; however, this doesn't
	// pose a problem for Sysbox as we are dealing with special FSs.
	//
	resp.Flags |= fuse.OpenDirectIO

	return f, nil
}

//
// Release FS operation.
//
func (f *File) Release(ctx context.Context, req *fuse.ReleaseRequest) error {

	logrus.Debugf("Requested Release() operation for entry %v (Req ID=%#v)",
		f.path, uint64(req.ID))

	//
	// Upon arrival of incoming fuse requests, sysbox-fs open()s and close()s
	// the associated file-system node. IOW, upon successful handling of an
	// open() fuse request, no file-system state (i.e. opened file-descriptor)
	// will be held in sysbox-fs for opened dentries. Subsequent fuse requests
	// generated by the same fuse-client process, will re-open the associated
	// file to carry out the corresponding read/write operation.
	//
	// Notice that this approach allows us to handle emulated and non-emulated
	// fs resources in the same manner. Non-emulated resources are only
	// reachable through 'nsexec' mechanisms, which relies on the utilization
	// of different processes to perform a determined i/o operation. In this
	// scenario, there's no point in open()ing and clos()ing files, as the
	// process performing the interim action (let's say, an open request) will
	// die upon completion, which will necessarily end up with the process'
	// fd-table getting wiped out by kernel upon process' exit().
	//
	// That is all to say, that there is no need to do anything with these
	// release() requests, as the associated inode is already closed by the
	// time these requests arrive. And that covers both non-emulated ('nsexec')
	// and emulated nodes.

	return nil
}

//
// Read FS operation.
//
func (f *File) Read(
	ctx context.Context,
	req *fuse.ReadRequest,
	resp *fuse.ReadResponse) error {

	logrus.Debugf("Requested Read() operation for entry %v (Req ID=%#v)",
		f.path, uint64(req.ID))

	ionode := f.server.service.ios.NewIOnode(f.name, f.path, f.attr.Mode)

	// Adjust receiving buffer to the request's size.
	resp.Data = resp.Data[:req.Size]

	// Identify the associated handler and execute it accordingly.
	handler, ok := f.server.service.hds.LookupHandler(ionode)
	if !ok {
		logrus.Errorf("Read() error: No supported handler for %v resource", f.path)
		return fmt.Errorf("No supported handler for %v resource", f.path)
	}

	request := &domain.HandlerRequest{
		ID:        uint64(req.ID),
		Pid:       req.Pid,
		Uid:       req.Uid,
		Gid:       req.Gid,
		Offset:    req.Offset,
		Data:      resp.Data,
		Container: f.server.container,
	}

	// Handler execution.
	n, err := handler.Read(ionode, request)
	if err != nil && err != io.EOF {
		logrus.Debugf("Read() error: %v", err)
		return err
	}

	resp.Data = resp.Data[:n]

	return nil
}

//
// Write FS operation.
//
func (f *File) Write(
	ctx context.Context,
	req *fuse.WriteRequest,
	resp *fuse.WriteResponse) error {

	logrus.Debugf("Requested Write() operation for entry %v (Req ID=%#v)",
		f.path, uint64(req.ID))

	ionode := f.server.service.ios.NewIOnode(f.name, f.path, f.attr.Mode)

	// Lookup the associated handler within handler-DB.
	handler, ok := f.server.service.hds.LookupHandler(ionode)
	if !ok {
		logrus.Errorf("Write() error: No supported handler for %v resource", f.path)
		return fmt.Errorf("No supported handler for %v resource", f.path)
	}

	request := &domain.HandlerRequest{
		ID:        uint64(req.ID),
		Pid:       req.Pid,
		Uid:       req.Uid,
		Gid:       req.Gid,
		Data:      req.Data,
		Container: f.server.container,
	}

	// Handler execution.
	n, err := handler.Write(ionode, request)
	if err != nil && err != io.EOF {
		logrus.Debugf("Write() error: %v", err)
		return err
	}

	resp.Size = n

	return nil
}

//
// Setattr FS operation.
//
func (f *File) Setattr(
	ctx context.Context,
	req *fuse.SetattrRequest,
	resp *fuse.SetattrResponse) error {

	logrus.Debugf("Requested Setattr() operation for entry %v (Req ID=%#v)",
		f.path, uint64(req.ID))

	// No file attr changes are allowed in a procfs, with the exception of
	// 'size' modifications which are needed to allow write()/truncate() ops.
	// All other 'fuse.SetattrValid' operations will be rejected.
	if req.Valid.Size() {
		return nil
	}

	return fuse.EPERM
}

//
// Forget FS operation.
//
func (f *File) Forget() {

	logrus.Debugf("Requested Forget() operation for entry %v", f.path)

	f.server.Lock()
	defer f.server.Unlock()

	if _, ok := f.server.nodeDB[f.path]; !ok {
		return
	}

	delete(f.server.nodeDB, f.path)
}

//
// Size method returns the 'size' of a File element.
//
func (f *File) Size() uint64 {
	return f.attr.Size
}

//
// Mode method returns the 'mode' of a File element.
//
func (f *File) Mode() os.FileMode {
	return f.attr.Mode
}

//
// ModTime method returns the modification-time of a File element.
//
func (f *File) ModTime() time.Time {
	return f.attr.Mtime
}

//
// statToAttr helper function to translate FS node-parameters from unix/kernel
// format to FUSE ones.
//
// Kernel FS node attribs:  fuse.attr (fuse_kernel*.go)
// FUSE node attribs:       fuse.Attr (fuse.go)
//
// TODO: Place me in a more appropriate location
//
func statToAttr(s *syscall.Stat_t) fuse.Attr {

	var a fuse.Attr

	a.Inode = uint64(s.Ino)
	a.Size = uint64(s.Size)
	a.Blocks = uint64(s.Blocks)

	a.Atime = time.Unix(s.Atim.Sec, s.Atim.Nsec)
	a.Mtime = time.Unix(s.Mtim.Sec, s.Mtim.Nsec)
	a.Ctime = time.Unix(s.Ctim.Sec, s.Ctim.Nsec)

	a.Mode = os.FileMode(s.Mode)
	a.Nlink = uint32(s.Nlink)
	a.Uid = uint32(s.Uid)
	a.Gid = uint32(s.Gid)
	a.Rdev = uint32(s.Rdev)
	a.BlockSize = uint32(s.Blksize)

	return a
}
